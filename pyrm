#!/usr/bin/env python2.7

import os
from os.path import basename
import shutil
import argh
import sys
from glob import glob


def get_column_output(s, ncols=3):
    """Format input list of strings into ncols columns."""

    s = [ s[i:i+ncols] for i in range(0, len(s), ncols) ]
    col_width = 2 + max(len(word) for row in s for word in row)

    s_formatted = "" 
    for row in s:
        s_formatted += "\t" + "".join(word.ljust(col_width) for word in row) + "\n"

    return s_formatted 


@argh.arg_hack()
def remove_except(force=False,
                  recursive=False, 
                  verbose=True, *args):
    """Delete all files/directories except the ones specified in *args.

        Parameters:
        -----------
            force: bool
                Remove files without asking if set True.
            recursive: bool
                Whether to recursively remove eventual directories.
            verbose: bool
                Show detailed output.
    """

    # exit if no arguments are supplied
    if not args:
        sys.exit("Error: no arguments supplied")

    # add calling script to files which should be left untouched
    args = list(args)
    script = basename(sys.argv[0])
    args.append(script)

    # fill list of files to be deleted
    del_list = []
    all_files = sorted(glob("*"))
    
    for file in all_files:
        if file not in args:
            del_list.append(file)

    # output in columns 
    print "Current directory listing:"
    print
    print get_column_output(all_files) 
    print "Remove all files except"
    print
    print get_column_output(args)
    print "?"
    print

    # get removal confirmation
    if not force:
        input = raw_input("Press (Yes | Y | yes | y) to delete files:\n")
    else:
        input = 'Y'

    print

    if input in ('Yes', 'Y', 'yes', 'y'):
        for i in del_list:
            try:
                os.remove(i)
            except OSError:
                if recursive:
                    shutil.rmtree(i) 
                    if verbose:
                        print "deleting", basename(i)
            else:
                if verbose:
                    print "deleting", basename(i)
    else:
        print "Aborting removal. \n"


if __name__ == '__main__':
    argh.dispatch_command(remove_except, completion=False)

