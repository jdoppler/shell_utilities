#!/usr/bin/env python2.7
"""A simple script to remove all but a few given files/directories in the
current working directory.

    usage: exrm [-h] [-f] [-r] files [files ...]

    A simple script to remove all but a few given files/directories in the 
    current working directory.

    positional arguments:
    files            Files to leave untouched.

    optional arguments:
    -h, --help       show this help message and exit
    -f, --force      Remove files without asking. (default: False)
    -r, --recursive  Whether to recursively remove directories. (default: False)
"""

import glob
import os
import shutil
import sys

import argparse
from argparse import ArgumentDefaultsHelpFormatter as help_formatter


def get_column_output(s, ncols=3):
    """Format input list of strings s into ncols columns."""

    s = [ s[i:i+ncols] for i in range(0, len(s), ncols) ]
    col_width = 2 + max(len(word) for row in s for word in row)

    s_formatted = ""
    for row in s:
        s_formatted += "\t" + "".join(word.ljust(col_width) for word in row) + "\n"

    return s_formatted


def remove_except(files=None, force=False, recursive=False):
    """Delete all files/directories except the ones specified.

        Parameters:
        -----------
            files: list of strings
                Files to leave untouched.
            force: bool
                Remove files without asking.
            recursive: bool
                Whether to recursively remove eventual directories.
    """

    # exit if no arguments are supplied
    if not files:
        sys.exit("Error: no arguments supplied")

    # add calling script to files which should be left untouched
    script = os.path.basename(sys.argv[0])
    if os.path.isfile(script):
        args.append(script)

    # fill list of files to be deleted
    del_list = []
    all_files = sorted(glob.glob("*"))

    for file in all_files:
        if file not in files:
            del_list.append(file)

    # output in columns and removal confirmation
    if not force:
        print "Current directory listing:"
        print
        print get_column_output(all_files)
        print "Remove all files except"
        print
        print get_column_output(files)
        print "?"
        print
        input = raw_input("Press (Yes | Y | yes | y) to delete files:\n")
        print
    else:
        input = 'Y'

    if input in ('Yes', 'Y', 'yes', 'y'):
        for i in del_list:
            try:
                os.remove(i)
            except OSError:
                if recursive:
                    shutil.rmtree(i)
                    if not force:
                        print "deleting", os.path.basename(i)
                else:
                    print "Warning: directory", os.path.basename(i), "not deleted."
            else:
                if not force:
                    print "deleting", os.path.basename(i)
    else:
        print "Aborting removal."


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=help_formatter)
    parser.add_argument("files", nargs="+",
                        help="Files to leave untouched.")
    parser.add_argument("-f", "--force", action="store_true",
                        help="Remove files without asking.")
    parser.add_argument("-r", "--recursive", action="store_true",
                        help="Whether to recursively remove directories.")
    args = parser.parse_args()

    remove_except(files=args.files, force=args.force,
                  recursive=args.recursive)
